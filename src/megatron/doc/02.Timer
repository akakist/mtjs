    Таймер

Таймер - очень важная штука, которая позволяет реализовывать разнообразные протоколы.
Для реализации возможностей получения событий по времени реализован сервис Timer

вставим куда-то код, например в обработчик startService

#define TI_START 1

sendEvent(ServiceEnum::Timer,new timerEvent::SetAlarm(TI_START,NULL,NULL,0.3,ListenerBase::serviceId));
Это посылка евента SetAlarm в сервис Timer.
Параметры:
1. timerId - int.
2. рефбуффер(строка по сути) - данные для евента. Эти данные склеиваются с timerId внутри таймера таймер можно ресетить или стопить, 
указав такую же комбинацию ID::DATA

3. Cookie - любые данные, которые не влияют на идентификацию таймера.
4. время в секундах. double - допускаются дроби.
5. route - маршрут евента, обычно можно указать this.

Пример:
    /// выставили таймер TI_START для peerUin
    sendEvent(ServiceEnum::Timer,new timerEvent::SetAlarm(T_PING_SHORT,toRef(peerUin),NULL,0.3,this));

    /// сделали ресет. Ресет означает отменить прошлый аларм с идентификатором timerId::Data и запустить новый.
    sendEvent(ServiceEnum::Timer, new timerEvent::ResetAlarm(T_PING_SHORT,toRef(peerUin),NULL,0.3,this));
    /// стопнули этот таймер.
    sendEvent(ServiceEnum::Timer,new timerEvent::StopAlarm(T_PING_SHORT,toRef(peerUin),this));


Пропробуйте потренироваться в коде.
Eсли вы не сделали обработку события таймер, то вам вылетит ошибка, указывающая на это.

делаем функцию  и включаем ее в handleEvent

bool Demo::on_TickAlarm(const timerEvent::TickAlarm* e)
{
    if(e->tid==T_PING_SHORT)
    {
	std::string uin=e->data->asString();
	/// делаем что-то с уин.
    }
}

Присоединение к таймеру данных и куки позволяет существенно упрощать логику в коде. Например, часто это используется для хранения sockaddr хоста, 
к которым поддерживаем соединение.
